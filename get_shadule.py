import csv
import datetime
import pytz
from datetime import datetime


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É –≤ UTC –∑–∞ –ö–∏—î–≤–æ–º.
def get_time():
    tzkiev = pytz.timezone('Europe/Kiev')
    utc = datetime.now(tzkiev).astimezone(tzkiev)
    now =  str(utc.time()).split(':')
    return (float(now[0]+'.'+now[1]))


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫–∞ –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º  º–∑ –§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ º, –¥–µ –∫–ª—é—á - –≥–æ–¥–∏–Ω–∞, –∞ –∑–Ω–∞—á–µ–Ω–Ω—è - –∞–≤—Ç–æ–±—É—Å
def dict_from_if():

    dict_if = {}

    # –î–∞–Ω—ñ –±–µ—Ä–µ–º–æ –∑ –≥–æ—Ç–æ–≤–æ–≥–æ csv —Ñ–∞–π–ª–∞
    with open('from_if.csv') as f:
        fieldnames = ['time', 'name']
        reader = csv.DictReader(f, fieldnames= fieldnames)

        for row in reader:

            time = row['time']
            name = row['name']

            # –ó–∞–ø–∏—Å –∫—ñ–ª—å–∫–æ—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –ø—ñ–¥ –æ–¥–∏–Ω –∫–ª—é—á, —è–∫—â–æ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ–¥–Ω–∞–∫–æ–≤–∏–π
            if time in [*dict_if]:
                l = dict_if[time] + ' ‚óæÔ∏è ' + name
                dict_if[time] = l
            # –ó–≤–∏—á–∞–π–Ω–∏–π –∑–∞–ø–∏—Å
            else:
                dict_if[time] = name

        return dict_if


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫–∞ –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º  º–∑ –¢—è–∑–µ–≤–∞ º, –¥–µ –∫–ª—é—á - –≥–æ–¥–∏–Ω–∞, –∞ –∑–Ω–∞—á–µ–Ω–Ω—è - –∞–≤—Ç–æ–±—É—Å
def dict_from_tiaziv():
    dict_t = {}

    # –î–∞–Ω—ñ –±–µ—Ä–µ–º–æ –∑ –≥–æ—Ç–æ–≤–æ–≥–æ csv —Ñ–∞–π–ª–∞
    with open('from_tiaziv.csv') as f:
        fieldnames = ['time', 'name']
        reader = csv.DictReader(f, fieldnames=fieldnames)

        for row in reader:

            time = row['time']
            name = row['name']

            # –ó–∞–ø–∏—Å –∫—ñ–ª—å–∫–æ—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –ø—ñ–¥ –æ–¥–∏–Ω –∫–ª—é—á, —è–∫—â–æ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ–¥–Ω–∞–∫–æ–≤–∏–π
            if time in [*dict_t]:
                l = dict_t[time] + ' ‚óæÔ∏è ' + name
                dict_t[time] = l
            # –ó–≤–∏—á–∞–π–Ω–∏–π –∑–∞–ø–∏—Å
            else:
                dict_t[time] = name

        return dict_t


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∞–≤—Ç–æ–±—É—Å—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
def number_bus(n, chat_id):
    f = open('numb_bus.txt')
    for line in f:
        if str(chat_id) in line:
            f = open('numb_bus.txt').read()
            fi = f.replace(line, '')

            f = open('numb_bus.txt', 'w')
            f.write(fi)
            f.close()

    f = open('numb_bus.txt', 'a')
    f.write(str(chat_id) + ',' + n + '\n')
    f.close()

numb = '8'

def get_number_bus(chat_id):

    f = open('numb_bus.txt')
    global numb
    for line in f:
        if str(chat_id) in line:
            numb = (line.split(',')[1])

        elif 'test' in line:
            numb = (line.split(',')[1])

    f.close()


def last_message(m,chat_id):

    f = open('last_message.txt')
    for line in f:
        if str(chat_id) in line:
            f = open('last_message.txt').read()
            fi = f.replace(line, '')

            f = open('last_message.txt', 'w')
            f.write(fi)
            f.close()

    f = open('last_message.txt', 'a')
    f.write(str(chat_id) + ',' + str(m) + '\n')
    f.close()


def get_last_mes(chat_id):
    f = open('last_message.txt')

    for line in f:
        if str(chat_id) in line:
            mes = (line.split(',')[1])

        elif 'test' in line:
            mes = (line.split(',')[1])

    f.close()

    return  mes



# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–≤—Ç–æ–±—É—Å—ñ–≤, –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∑–∞–¥–∞–Ω–æ–≥–æ —á–∞—Å—É.
def return_time(dicti, time):
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑ —á–∞—Å–æ–º –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è + –¥–æ–¥–∞—î–º–æ —Å–≤—ñ–π —á–∞—Å
    list_time = []

    for i in [*dicti]:
        list_time.append(float(i))

    list_time.append(time)

    # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫–∞, –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å–∞ –Ω–∞—à–æ–≥–æ —á–∞—Å—É
    list_time.sort()
    index = list_time.index(time)

    # –í–∏–∫–ª—é—á–∞—î–º–æ –∞–≤—Ç–æ–±—É—Å–∏ —è–∫—ñ —ó–¥—É—Ç—å –≤ —Ç—É —Å–∞–º—É —Ö–≤–∏–ª–∏–Ω—É –∫–æ–ª–∏ —Ä–æ–±–∏–º–æ –∑–∞–ø–∏—Ç
    if format(time,'.2f') in [*dicti]:
        index+=1

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –∞–≤—Ç–æ–±—É—Å—ñ–≤
    result = []
    global numb
    try:
        list_time[index + 1] # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —á–∞—Å –∑–∞–ø–∏—Ç—É –ø—ñ–∑–Ω—ñ—à–∏–π –∑–∞ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞

        a = list_time[(index + 1): (index + int(numb)+1)]

        for i in a:
            result.append(format(i, '.2f'))
        return result

    except IndexError:
        a = list_time[0: int(numb)]

        for i in a:
            result.append(format(i, '.2f'))
        return result


# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫–∞ –∑ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
def final_result(t, d):
    text = ''
    t.reverse()
    for i in t:
        text = ('üïñ  ' + i + ' ‚ûñ ' + d[i]) + '\n\n' + text
    return text


def in_tiaziv():
    d = dict_from_if()
    t = return_time((d), get_time())
    return (final_result(t, d))


def in_frankivsk():
    d = dict_from_tiaziv()
    t = return_time((d), get_time())
    return ('‚ö†Ô∏è –†–æ–∑–∫–ª–∞–¥ –Ω–µ—Ç–æ—á–Ω–∏–π \n\n'+final_result(t, d))
